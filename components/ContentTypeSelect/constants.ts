import { ContentTypeOption } from '@/types/types';

export const PROGRAMMING_LANGUAGES = [
  {
    value: 'pascal',
    label: 'Pascal',
    category: 'Programming Language',
    promptDescription: 'Paste your Pascal source code here.',
    expectedFormat: 'Pascal source code',
    exampleInput: 'program HelloWorld; begin WriteLn("Hello, world!"); end.',
  },
  {
    value: 'javascript',
    label: 'JavaScript',
    category: 'Programming Language',
    promptDescription: 'Paste your JavaScript source code here.',
    expectedFormat: 'JavaScript source code',
    exampleInput: 'console.log("Hello, world!");',
  },
  {
    value: 'typescript',
    label: 'TypeScript',
    category: 'Programming Language',
    promptDescription: 'Paste your TypeScript source code here.',
    expectedFormat: 'TypeScript source code',
    exampleInput:
      'let message: string = "Hello, world!"; console.log(message);',
  },
  {
    value: 'python',
    label: 'Python',
    category: 'Programming Language',
    promptDescription: 'Paste your Python source code here.',
    expectedFormat: 'Python source code',
    exampleInput: 'print("Hello, world!")',
  },
  {
    value: 'tsx',
    label: 'TSX',
    category: 'Web Development',
    promptDescription: 'Paste your TSX code here.',
    expectedFormat: 'TSX code',
    exampleInput: '<div>Hello, world!</div>',
  },
  {
    value: 'jsx',
    label: 'JSX',
    category: 'Web Development',
    promptDescription: 'Paste your JSX code here.',
    expectedFormat: 'JSX code',
    exampleInput: '<div>Hello, world!</div>',
  },
  {
    value: 'vue',
    label: 'Vue',
    category: 'Web Development',
    promptDescription: 'Paste your Vue code here.',
    expectedFormat: 'Vue code',
    exampleInput:
      '<template>\n  <div>\n    Hello, world!\n  </div>\n</template>',
  },
  {
    value: 'go',
    label: 'Go',
    category: 'Programming Language',
    promptDescription: 'Paste your Go source code here.',
    expectedFormat: 'Go source code',
    exampleInput:
      'package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello, world!")\n}',
  },
  {
    value: 'c',
    label: 'C',
    category: 'Programming Language',
    promptDescription: 'Paste your C source code here.',
    expectedFormat: 'C source code',
    exampleInput:
      '#include <stdio.h>\n\nint main() {\n   printf("Hello, World!");\n   return 0;\n}',
  },

  {
    value: 'c++',
    label: 'C++',
    category: 'Programming Language',
    promptDescription: 'Paste your C++ source code here.',
    expectedFormat: 'C++ source code',
    exampleInput:
      '#include <iostream>\n\nint main() {\n   std::cout << "Hello, World!";\n   return 0;\n}',
  },
  {
    value: 'c#',
    label: 'C#',
    category: 'Programming Language',
    promptDescription: 'Paste your C# source code here.',
    expectedFormat: 'C# source code',
    exampleInput:
      'using System;\n\npublic class Program {\n   public static void Main() {\n      Console.WriteLine("Hello, world!");\n   }\n}',
  },
  {
    value: 'java',
    label: 'Java',
    category: 'Programming Language',
    promptDescription: 'Paste your Java source code here.',
    expectedFormat: 'Java source code',
    exampleInput:
      'public class Main {\n    public static void main(String[] args) {\n        System.out.println("Hello, world!");\n    }\n}',
  },
  {
    value: 'visual basic .net',
    label: 'Visual Basic .NET',
    category: 'Programming Language',
    promptDescription: 'Paste your Visual Basic .NET source code here.',
    expectedFormat: 'Visual Basic .NET source code',
    exampleInput:
      'Module Module1\n   Sub Main()\n      Console.WriteLine("Hello, World!")\n   End Sub\nEnd Module',
  },
  {
    value: 'sql',
    label: 'SQL',
    category: 'Programming Language',
    promptDescription: 'Paste your SQL code here.',
    expectedFormat: 'SQL code',
    exampleInput: 'SELECT * FROM users;',
  },
  {
    value: 'assembly language',
    label: 'Assembly Language',
    category: 'Programming Language',
    promptDescription: 'Paste your Assembly Language code here.',
    expectedFormat: 'Assembly Language code',
    exampleInput: 'section .data\nhello db "Hello, world!", 0',
  },
  {
    value: 'php',
    label: 'PHP',
    category: 'Programming Language',
    promptDescription: 'Paste your PHP source code here.',
    expectedFormat: 'PHP source code',
    exampleInput: '<?php\necho "Hello, world!";\n?>',
  },
  {
    value: 'ruby',
    label: 'Ruby',
    category: 'Programming Language',
    promptDescription: 'Paste your Ruby source code here.',
    expectedFormat: 'Ruby source code',
    exampleInput: 'puts "Hello, world!"',
  },
  {
    value: 'swift',
    label: 'Swift',
    category: 'Programming Language',
    promptDescription: 'Paste your Swift source code here.',
    expectedFormat: 'Swift source code',
    exampleInput: 'print("Hello, World!")',
  },
  {
    value: 'swiftui',
    label: 'SwiftUI',
    category: 'Programming Language',
    promptDescription: 'Paste your SwiftUI source code here.',
    expectedFormat: 'SwiftUI source code',
    exampleInput:
      'import SwiftUI\n\nstruct ContentView: View {\n   var body: some View {\n       Text("Hello, World!")\n   }\n}',
  },
  {
    value: 'kotlin',
    label: 'Kotlin',
    category: 'Programming Language',
    promptDescription: 'Paste your Kotlin source code here.',
    expectedFormat: 'Kotlin source code',
    exampleInput:
      'fun main(args: Array<String>) {\n   println("Hello, World!")\n}',
  },
  {
    value: 'r',
    label: 'R',
    category: 'Programming Language',
    promptDescription: 'Paste your R source code here.',
    expectedFormat: 'R source code',
    exampleInput: 'print("Hello, world!")',
  },
  {
    value: 'objective-c',
    label: 'Objective-C',
    category: 'Programming Language',
    promptDescription: 'Paste your Objective-C source code here.',
    expectedFormat: 'Objective-C source code',
    exampleInput:
      '#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n   @autoreleasepool {\n       NSLog(@"Hello, World!");\n   }\n   return 0;\n}',
  },
  {
    value: 'perl',
    label: 'Perl',
    category: 'Programming Language',
    promptDescription: 'Paste your Perl source code here.',
    expectedFormat: 'Perl source code',
    exampleInput: 'print "Hello, world!\n";',
  },
  { value: 'sas', label: 'SAS' },
  { value: 'scala', label: 'Scala' },
  { value: 'dart', label: 'Dart' },
  { value: 'rust', label: 'Rust' },
  { value: 'haskell', label: 'Haskell' },
  { value: 'lua', label: 'Lua' },
  { value: 'groovy', label: 'Groovy' },
  { value: 'elixir', label: 'Elixir' },
  { value: 'clojure', label: 'Clojure' },
  { value: 'lisp', label: 'Lisp' },
  { value: 'julia', label: 'Julia' },
  { value: 'matlab', label: 'Matlab' },
  { value: 'fortran', label: 'Fortran' },
  { value: 'cobol', label: 'COBOL' },
  {
    value: 'bash',
    label: 'Bash',
    category: 'Programming Language',
    promptDescription: 'Paste your Bash source code here.',
    expectedFormat: 'Bash source code',
    exampleInput: 'echo "Hello, world!"',
  },
  { value: 'powershell', label: 'Powershell' },
  { value: 'pl/sql', label: 'PL/SQL' },
  {
    value: 'css',
    label: 'CSS',
    category: 'Web Development',
    promptDescription: 'Paste your CSS here.',
    expectedFormat: 'CSS',
    exampleInput: 'body {\n    background-color: lightblue;\n}',
  },
  { value: 'racket', label: 'Racket' },
  {
    value: 'html',
    label: 'HTML',
    category: 'Web Development',
    promptDescription: 'Paste your HTML here.',
    expectedFormat: 'HTML',
    exampleInput:
      '<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Hello, world!</h1>\n\n</body>\n</html>',
  },
  { value: 'nosql', label: 'NoSQL' },
  {
    value: 'natural language',
    label: 'Natural Language',
    category: 'Natural Language',
    promptDescription: 'Paste your natural language text here.',
    expectedFormat: 'Natural language text',
    exampleInput: 'Hello, how are you?',
  },
  { value: 'coffeescript', label: 'CoffeeScript' },
] as ContentTypeOption[];

export const WEB_FRAMEWORKS = [
  {
    value: 'react',
    label: 'React',
    category: 'Web Development Framework',
    promptDescription: 'Paste your React code or JSX here.',
    expectedFormat: 'JSX code',
    exampleInput: '<div>Hello, world!</div>',
  },
  { value: 'angular', label: 'Angular' },
  { value: 'vue', label: 'Vue' },
  { value: 'svelte', label: 'Svelte' },
  { value: 'next.js', label: 'Next.js' },
  { value: 'blitz', label: 'Blitz' },
  { value: 'nuxt.js', label: 'Nuxt.js' },
  { value: 'gatsby', label: 'Gatsby' },
  { value: 'ember', label: 'Ember' },
  { value: 'backbone', label: 'Backbone' },
  { value: 'meteor', label: 'Meteor' },
  { value: 'polymer', label: 'Polymer' },
  { value: 'knockout', label: 'Knockout' },
  { value: 'aurelia', label: 'Aurelia' },
  { value: 'preact', label: 'Preact' },
  { value: 'riot', label: 'Riot' },
  { value: 'vanilla', label: 'Vanilla' },
] as ContentTypeOption[];

export const SOFTWARE_TESTING_TOOLS = [
  {
    value: 'jest',
    label: 'Jest',
    category: 'JavaScript Testing Framework',
    promptDescription: 'Paste your Jest test code here.',
    expectedFormat: 'JavaScript test code with Jest',
    exampleInput:
      'test("adds 1 + 2 to equal 3", () => { expect(sum(1, 2)).toBe(3); });',
  },
  {
    value: 'mocha',
    label: 'Mocha',
    category: 'JavaScript Testing Framework',
    promptDescription: 'Paste your Mocha test code here.',
    expectedFormat: 'JavaScript test code with Mocha',
    exampleInput:
      'describe("Array", function() {\n  describe("#indexOf()", function() {\n    it("should return -1 when the value is not present", function() {\n      assert.equal([1, 2, 3].indexOf(4), -1);\n    });\n  });\n});',
  },
  { value: 'jasmine', label: 'Jasmine' },
  { value: 'karma', label: 'Karma' },
  { value: 'chai', label: 'Chai' },
  { value: 'enzyme', label: 'Enzyme' },
  { value: 'cypress', label: 'Cypress' },
  { value: 'protractor', label: 'Protractor' },
  { value: 'selenium', label: 'Selenium' },
  { value: 'junit', label: 'JUnit' },
  {
    value: 'pytest',
    label: 'PyTest',
    category: 'Python Testing Framework',
    promptDescription: 'Paste your PyTest test code here.',
    expectedFormat: 'Python test code with PyTest',
    exampleInput:
      'def test_sum():\n    assert sum([1, 2, 3]) == 6, "Should be 6"\n\ndef test_sum_tuple():\n    assert sum((1, 2, 2)) == 6, "Should be 6"\n\nif __name__ == "__main__":\n    test_sum()\n    test_sum_tuple()\n    print("Everything passed")',
  },
  { value: 'behave', label: 'Behave' },
  { value: 'maven', label: 'Maven' },
  { value: 'gradle', label: 'Gradle' },
  { value: 'nunit', label: 'NUnit' },
  { value: 'xunit', label: 'xUnit' },
  { value: 'cucumber', label: 'Cucumber' },
  { value: 'jmeter', label: 'JMeter' },
  { value: 'locust', label: 'Locust' },
  { value: 'robot framework', label: 'Robot Framework' },
  { value: 'appium', label: 'Appium' },
  { value: 'testcafe', label: 'TestCafe' },
  { value: 'jmock', label: 'JMock' },
  { value: 'mockito', label: 'Mockito' },
  {
    value: 'rspec',
    label: 'RSpec',
    category: 'Ruby Testing Framework',
    promptDescription: 'Paste your RSpec test code here.',
    expectedFormat: 'Ruby test code with RSpec',
    exampleInput:
      'describe "A new account" do\n  it "should have a balance of 0" do\n    account = Account.new\n    account.balance.should eq(0)\n  end\nend',
  },
  {
    value: 'minitest',
    label: 'Minitest',
    category: 'Ruby Testing Framework',
    promptDescription: 'Paste your Minitest test code here.',
    expectedFormat: 'Ruby test code with Minitest',
    exampleInput:
      'require "minitest/autorun"\n\nclass TestAccount < Minitest::Test\n  def test_new_account\n    account = Account.new\n    assert_equal 0, account.balance\n  end\nend',
  },
  {
    value: 'unittest',
    label: 'unittest',
    category: 'Python Testing Framework',
    promptDescription: 'Paste your unittest test code here.',
    expectedFormat: 'Python test code with unittest',
    exampleInput:
      'import unittest\n\nclass TestAccount(unittest.TestCase):\n  def test_new_account(self):\n    account = Account()\n    self.assertEqual(account.balance, 0)',
  },
  {
    value: 'riteway',
    label: 'RITEway',
    category: 'JavaScript Testing Framework',
    promptDescription: 'Paste your RITEway test code here.',
    expectedFormat: 'JavaScript test code with RITEway',
    exampleInput:
      'import { describe } from "riteway";\ndescribe("add()", async (assert) => {\n    assert({\n        given: "no arguments",\n        should: "return 0",\n        actual: add(),\n        expected: 0,\n    });\n});',
  },
] as ContentTypeOption[];

export const DATABASES = [
  {
    value: 'mysql',
    label: 'MySQL',
    category: 'Database',
    promptDescription: 'Paste your MySQL commands here.',
    expectedFormat: 'SQL commands',
    exampleInput: 'SELECT * FROM table;',
  },
  { value: 'postgresql', label: 'PostgreSQL' },
  { value: 'oracle', label: 'Oracle' },
  { value: 'sql server', label: 'SQL Server' },
  { value: 'sqlite', label: 'SQLite' },
  { value: 'mongodb', label: 'MongoDB' },
  { value: 'redis', label: 'Redis' },
  { value: 'cassandra', label: 'Cassandra' },
  { value: 'dynamodb', label: 'DynamoDB' },
  { value: 'firebase', label: 'Firebase' },
  { value: 'neo4j', label: 'Neo4j' },
  { value: 'couchdb', label: 'CouchDB' },
] as ContentTypeOption[];

export const WEB_TECHNOLOGIES = [
  {
    value: 'html',
    label: 'HTML',
    category: 'Web Development',
    promptDescription: 'Paste your HTML here.',
    expectedFormat: 'HTML',
    exampleInput:
      '<!DOCTYPE html>\n<html>\n<body>\n\n<h1>Hello, world!</h1>\n\n</body>\n</html>',
  },
  {
    value: 'css',
    label: 'CSS',
    category: 'Web Development',
    promptDescription: 'Paste your CSS here.',
    expectedFormat: 'CSS',
    exampleInput: 'body {\n    background-color: lightblue;\n}',
  },
  {
    value: 'javascript',
    label: 'JavaScript',
    category: 'Web Development',
    promptDescription: 'Paste your JavaScript here.',
    expectedFormat: 'JavaScript',
    exampleInput: 'console.log("Hello, world!");',
  },
  {
    value: 'json',
    label: 'JSON',
    category: 'Web Development',
    promptDescription: 'Paste your JSON here.',
    expectedFormat: 'JSON',
  },
  {
    value: 'xml',
    label: 'XML',
    category: 'Web Development',
    promptDescription: 'Paste your XML here.',
    expectedFormat: 'XML',
    exampleInput: '<note>\n  <to>Tove</to>\n  <from>Jani</from>\n</note>',
  },
  {
    value: 'svg',
    label: 'SVG',
  },
  {
    value: 'canvas',
    label: 'Canvas',
  },
  {
    value: 'websockets',
    label: 'WebSockets',
  },
  {
    value: 'webrtc',
    label: 'WebRTC',
  },
  {
    value: 'webgl',
    label: 'WebGL',
  },
  {
    value: 'webassembly',
    label: 'WebAssembly',
  },
  {
    value: 'lodash',
    label: 'Lodash',
    category: 'JavaScript Library',
    promptDescription: 'Paste your code using Lodash here.',
    expectedFormat: 'JavaScript code with Lodash',
    exampleInput: '_.chunk(["a", "b", "c", "d"], 2);',
  },
  { value: 'jquery', label: 'jQuery' },
  { value: 'moment', label: 'Moment.js' },
  { value: 'axios', label: 'Axios' },
  { value: 'redux', label: 'Redux' },
  { value: 'express', label: 'Express' },
  { value: 'd3', label: 'D3.js' },
  { value: 'socket.io', label: 'Socket.IO' },
  { value: 'tensorflow.js', label: 'TensorFlow.js' },
  { value: 'three.js', label: 'Three.js' },
  { value: 'bootstrap', label: 'Bootstrap' },
  { value: 'material-ui', label: 'Material-UI' },
] as ContentTypeOption[];

export const LITERARY_CONTENT = [
  {
    value: 'novel',
    label: 'Novel',
    category: 'Literature',
    promptDescription: 'Paste your novel excerpt here.',
    expectedFormat: 'Novel excerpt',
    exampleInput:
      'In a town in the east, moved by a whim, the travelers decided to stop for a while.',
  },
  {
    value: 'haiku',
    label: 'Haiku',
    category: 'Poetry',
    promptDescription: 'Paste your haiku here.',
    expectedFormat: 'Haiku',
    exampleInput:
      'Old silent pond\nA frog jumps into the pond—\nSplash! Silence again.',
  },
  {
    value: 'short story',
    label: 'Short Story',
    category: 'Literature',
  },
  {
    value: 'poem',
    label: 'Poem',
    category: 'Poetry',
  },
  { value: 'memoir', label: 'Memoir' },
  { value: 'book review', label: 'Book Review' },
  { value: 'literary critique', label: 'Literary Critique' },
  { value: 'book summary', label: 'Book Summary' },
  { value: 'play', label: 'Play' },
  { value: 'essay', label: 'Essay' },
  { value: 'article', label: 'Article' },
  { value: 'dissertation', label: 'Dissertation' },
  { value: 'biography', label: 'Biography' },
  { value: 'autobiography', label: 'Autobiography' },
  { value: 'letter', label: 'Letter' },
  { value: 'blog post', label: 'Blog Post' },
  { value: 'review', label: 'Review' },
  { value: 'news report', label: 'News Report' },
  { value: 'screenplay', label: 'Screenplay' },
  { value: 'telegram', label: 'Telegram' },
  { value: 'speech', label: 'Speech' },
  { value: 'song lyrics', label: 'Song Lyrics' },
  { value: 'flash fiction', label: 'Flash Fiction' },
  { value: 'fanfiction', label: 'Fanfiction' },
  { value: 'personal letter', label: 'Personal Letter' },
  { value: 'love letter', label: 'Love Letter' },
  { value: 'thank you note', label: 'Thank You Note' },
  { value: 'sympathy note', label: 'Sympathy Note' },
  { value: 'birthday card', label: 'Birthday Card' },
  { value: 'invitation', label: 'Invitation' },
  { value: 'diary entry', label: 'Diary Entry' },
  { value: 'movie script', label: 'Movie Script' },
  { value: 'tv show script', label: 'TV Show Script' },
  { value: 'comic book script', label: 'Comic Book Script' },
  { value: 'game script', label: 'Game Script' },
  { value: 'theater play script', label: 'Theater Play Script' },
  { value: 'movie review', label: 'Movie Review' },
  { value: 'tv show review', label: 'TV Show Review' },
  { value: 'music album review', label: 'Music Album Review' },
  { value: 'video game review', label: 'Video Game Review' },
] as ContentTypeOption[];

export const WEB_CONTENT = [
  { value: 'webpage', label: 'Webpage' },
  { value: 'blog post', label: 'Blog Post' },
  { value: 'news article', label: 'News Article' },
  { value: 'wiki entry', label: 'Wiki Entry' },
  { value: 'forum post', label: 'Forum Post' },
  { value: 'comment', label: 'Comment' },
  { value: 'tweet', label: 'Tweet' },
  { value: 'facebook post', label: 'Facebook Post' },
  { value: 'instagram caption', label: 'Instagram Caption' },
  { value: 'email', label: 'Email' },
  { value: 'product description', label: 'Product Description' },
  { value: 'event description', label: 'Event Description' },
  { value: 'FAQ', label: 'FAQ' },
  { value: 'online ad', label: 'Online Ad' },
  { value: 'tweet', label: 'Tweet' },
  { value: 'facebook status', label: 'Facebook Status' },
  { value: 'instagram caption', label: 'Instagram Caption' },
  { value: 'linkedin post', label: 'LinkedIn Post' },
  { value: 'reddit post', label: 'Reddit Post' },
  { value: 'blog post', label: 'Blog Post' },
  { value: 'vlog script', label: 'Vlog Script' },
  { value: 'podcast script', label: 'Podcast Script' },
  { value: 'youtube description', label: 'Youtube Description' },
  { value: 'tiktok description', label: 'TikTok Description' },
] as ContentTypeOption[];

export const BUSINESS_DOCUMENTS = [
  { value: 'executive summary', label: 'Executive Summary' },
  { value: 'SWOT analysis', label: 'SWOT Analysis' },
  { value: 'mission statement', label: 'Mission Statement' },
  { value: 'company profile', label: 'Company Profile' },
  { value: 'annual report', label: 'Annual Report' },
  { value: 'market research report', label: 'Market Research Report' },
  { value: 'financial statement', label: 'Financial Statement' },
  { value: 'meeting minutes', label: 'Meeting Minutes' },
  { value: 'memorandum', label: 'Memorandum' },
  { value: 'invoice', label: 'Invoice' },
  { value: 'cover letter', label: 'Cover Letter' },
  { value: 'organizational chart', label: 'Organizational Chart' },
  { value: 'resume', label: 'Resume' },
  { value: 'job description', label: 'Job Description' },
  {
    label: 'Business Plan',
    category: 'Business Document',
    promptDescription: 'Paste the business plan text here.',
    expectedFormat: 'Business plan text',
    exampleInput:
      'Company X is a tech startup focused on disrupting the Y industry by...',
  },
  { value: 'report', label: 'Report' },
  { value: 'proposal', label: 'Proposal' },
  { value: 'presentation', label: 'Presentation' },
  { value: 'press release', label: 'Press Release' },
  { value: 'manual', label: 'Manual' },
  { value: 'white paper', label: 'White Paper' },
  { value: 'case study', label: 'Case Study' },
  { value: 'contract', label: 'Contract' },
  { value: 'RFP', label: 'Request for Proposal (RFP)' },
] as ContentTypeOption[];

export const ACADEMIC_CONTENT = [
  { value: 'lecture notes', label: 'Lecture Notes' },
  { value: 'research paper', label: 'Research Paper' },
  { value: 'thesis', label: 'Thesis' },
  { value: 'dissertation', label: 'Dissertation' },
  { value: 'course syllabus', label: 'Course Syllabus' },
  { value: 'lab report', label: 'Lab Report' },
  { value: 'quiz', label: 'Quiz' },
  { value: 'exam', label: 'Exam' },
  { value: 'problem set', label: 'Problem Set' },
  { value: 'course syllabus', label: 'Course Syllabus' },
  { value: 'lesson plan', label: 'Lesson Plan' },
  { value: 'study guide', label: 'Study Guide' },
  { value: 'flashcards', label: 'Flashcards' },
  { value: 'academic paper', label: 'Academic Paper' },
  { value: 'dissertation', label: 'Dissertation' },
  { value: 'textbook chapter', label: 'Textbook Chapter' },
  { value: 'lecture transcript', label: 'Lecture Transcript' },
  { value: 'conference paper', label: 'Conference Paper' },
  { value: 'research proposal', label: 'Research Proposal' },
] as ContentTypeOption[];

export const ADVERTISING_CONTENT = [
  { value: 'billboard', label: 'Billboard' },
  { value: 'print ad', label: 'Print Ad' },
  { value: 'radio spot', label: 'Radio Spot' },
  { value: 'TV commercial script', label: 'TV Commercial Script' },
  { value: 'online ad', label: 'Online Ad' },
  { value: 'email campaign', label: 'Email Campaign' },
  { value: 'brochure', label: 'Brochure' },
  { value: 'flyer', label: 'Flyer' },
  { value: 'direct mail', label: 'Direct Mail' },
  { value: 'product packaging', label: 'Product Packaging' },
  { value: 'ad copy', label: 'Ad Copy' },
  { value: 'press release', label: 'Press Release' },
  { value: 'sales letter', label: 'Sales Letter' },
  { value: 'email campaign', label: 'Email Campaign' },
  { value: 'product description', label: 'Product Description' },
  { value: 'landing page', label: 'Landing Page' },
  { value: 'newsletter', label: 'Newsletter' },
  { value: 'catalog', label: 'Catalog' },
  { value: 'brochure', label: 'Brochure' },
  { value: 'marketing plan', label: 'Marketing Plan' },
  { value: 'banner ad', label: 'Banner Ad' },
  { value: 'social media post', label: 'Social Media Post' },
  { value: 'marketing report', label: 'Marketing Report' },
] as ContentTypeOption[];

export const LEGAL_DOCUMENTS = [
  { value: 'contract', label: 'Contract' },
  { value: 'will', label: 'Will' },
  { value: 'lease agreement', label: 'Lease Agreement' },
  { value: 'non-disclosure agreement', label: 'Non-Disclosure Agreement' },
  { value: 'terms of service', label: 'Terms of Service' },
  { value: 'privacy policy', label: 'Privacy Policy' },
  { value: 'lawsuit', label: 'Lawsuit' },
  { value: 'patent application', label: 'Patent Application' },
] as ContentTypeOption[];

export const SCIENTIFIC_CONTENT = [
  { value: 'research paper', label: 'Research Paper' },
  { value: 'lab report', label: 'Lab Report' },
  { value: 'case study', label: 'Case Study' },
  { value: 'review article', label: 'Review Article' },
  { value: 'conference paper', label: 'Conference Paper' },
  { value: 'thesis', label: 'Thesis' },
  { value: 'patent', label: 'Patent' },
  { value: 'medical report', label: 'Medical Report' },
  { value: 'patient history', label: 'Patient History' },
  { value: 'drug prescription', label: 'Drug Prescription' },
  { value: 'discharge summary', label: 'Discharge Summary' },
  { value: 'medical research paper', label: 'Medical Research Paper' },
  {
    value: 'patient information leaflet',
    label: 'Patient Information Leaflet',
  },
] as ContentTypeOption[];

export const TECHNICAL_CONTENT = [
  { value: 'user manual', label: 'User Manual' },
  { value: 'technical specifications', label: 'Technical Specifications' },
  { value: 'api documentation', label: 'API Documentation' },
  { value: 'software documentation', label: 'Software Documentation' },
  { value: 'hardware documentation', label: 'Hardware Documentation' },
  { value: 'FAQ', label: 'FAQ' },
  { value: 'installation guide', label: 'Installation Guide' },
] as ContentTypeOption[];

export const NEWS_MEDIA_CONTENT = [
  { value: 'news article', label: 'News Article' },
  { value: 'editorial', label: 'Editorial' },
  { value: 'press release', label: 'Press Release' },
  { value: 'op-ed', label: 'Op-Ed' },
  { value: 'letter to the editor', label: 'Letter to the Editor' },
  { value: 'interview', label: 'Interview' },
  { value: 'investigative report', label: 'Investigative Report' },
  { value: 'feature article', label: 'Feature Article' },
  { value: 'column', label: 'Column' },
  { value: 'news brief', label: 'News Brief' },
  { value: 'photo caption', label: 'Photo Caption' },
  { value: 'obituary', label: 'Obituary' },
] as ContentTypeOption[];

export const GOVERNMENT_DOCUMENTS = [
  {
    value: 'legislation',
    label: 'Legislation',
    category: 'Government Document',
    promptDescription: 'Paste the text of the legislation here.',
    expectedFormat: 'Legislation text',
    exampleInput:
      'Be it enacted by the Senate and House of Representatives in Congress assembled...',
  },
  { value: 'bill', label: 'Bill' },
  { value: 'executive order', label: 'Executive Order' },
  { value: 'policy', label: 'Policy' },
  { value: 'briefing paper', label: 'Briefing Paper' },
  { value: 'regulation', label: 'Regulation' },
  { value: 'report', label: 'Report' },
  { value: 'public notice', label: 'Public Notice' },
  { value: 'speech', label: 'Speech' },
  { value: 'budget', label: 'Budget' },
  { value: 'petition', label: 'Petition' },
] as ContentTypeOption[];
